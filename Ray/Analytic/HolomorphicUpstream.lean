import Mathlib.Analysis.Analytic.Basic
import Mathlib.Analysis.Analytic.Composition
import Mathlib.Analysis.Analytic.IsolatedZeros
import Mathlib.Analysis.Analytic.Linear
import Mathlib.Analysis.Calculus.FormalMultilinearSeries
import Mathlib.Analysis.Complex.CauchyIntegral
import Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv
import Mathlib.Data.Complex.Basic
import Mathlib.Data.Finset.Basic
import Mathlib.Data.Real.Basic
import Mathlib.Data.Real.Pi.Bounds
import Mathlib.Data.Set.Basic
import Mathlib.Topology.Basic

/-!
## Basics about complex analytic functions
-/

open Complex (abs exp I log)
open Filter (atTop)
open Metric (ball closedBall sphere isOpen_ball)
open Set (univ)
open scoped Real NNReal ENNReal Topology
noncomputable section

variable {E : Type} [NormedAddCommGroup E] [NormedSpace ‚ÑÇ E] [CompleteSpace E]
variable {F : Type} [NormedAddCommGroup F] [NormedSpace ‚ÑÇ F] [CompleteSpace F]
variable {G : Type} [NormedAddCommGroup G] [NormedSpace ‚ÑÇ G]

/-- A function is analytic at `z` iff it's differentiable on a surrounding open set -/
theorem analyticOn_iff_differentiableOn {f : ‚ÑÇ ‚Üí E} {s : Set ‚ÑÇ} (o : IsOpen s) :
    AnalyticOn ‚ÑÇ f s ‚Üî DifferentiableOn ‚ÑÇ f s := by
  constructor
  ¬∑ exact AnalyticOn.differentiableOn
  ¬∑ intro d z zs
    exact DifferentiableOn.analyticAt d (o.mem_nhds zs)

/-- A function is entire iff it's differentiable everywhere -/
theorem analyticOn_univ_iff_differentiable {f : ‚ÑÇ ‚Üí E} :
    AnalyticOn ‚ÑÇ f univ ‚Üî Differentiable ‚ÑÇ f := by
  simp only [‚Üê  differentiableOn_univ]
  exact analyticOn_iff_differentiableOn isOpen_univ

/-- A function is analytic at `z` iff it's differentiable on near `z` -/
theorem analyticAt_iff_eventually_differentiableAt {f : ‚ÑÇ ‚Üí E} {c : ‚ÑÇ} :
    AnalyticAt ‚ÑÇ f c ‚Üî ‚àÄ·∂† z in ùìù c, DifferentiableAt ‚ÑÇ f z := by
  constructor
  ¬∑ intro fa; rcases fa.exists_ball_analyticOn with ‚ü®r, rp, fa‚ü©
    exact fa.differentiableOn.eventually_differentiableAt (Metric.ball_mem_nhds _ rp)
  ¬∑ intro d; rcases Metric.eventually_nhds_iff.mp d with ‚ü®r, rp, d‚ü©
    have dr : DifferentiableOn ‚ÑÇ f (ball c r) := by
      intro z zs; simp only [Metric.mem_ball] at zs; exact (d zs).differentiableWithinAt
    rw [‚Üê analyticOn_iff_differentiableOn isOpen_ball] at dr
    exact dr _ (Metric.mem_ball_self rp)

/-- `exp` is entire -/
theorem AnalyticOn.exp : AnalyticOn ‚ÑÇ exp univ := by
  rw [analyticOn_univ_iff_differentiable]; exact Complex.differentiable_exp

/-- `exp` is analytic at any point -/
theorem AnalyticAt.exp {z : ‚ÑÇ} : AnalyticAt ‚ÑÇ exp z :=
  AnalyticOn.exp z (Set.mem_univ _)

/-- `log` is analytic away from nonpositive reals -/
theorem analyticAt_log {c : ‚ÑÇ} (m : c ‚àà Complex.slitPlane) : AnalyticAt ‚ÑÇ log c := by
  rw [analyticAt_iff_eventually_differentiableAt]
  filter_upwards [Complex.isOpen_slitPlane.eventually_mem m]
  intro z m
  exact differentiableAt_id.clog m

/-- `log` is analytic away from nonpositive reals -/
theorem AnalyticAt.log {f : G ‚Üí ‚ÑÇ} {c : G} (fa : AnalyticAt ‚ÑÇ f c) (m : f c ‚àà Complex.slitPlane) :
    AnalyticAt ‚ÑÇ (fun z ‚Ü¶ log (f z)) c :=
  (analyticAt_log m).comp fa

/-- `log` is analytic away from nonpositive reals -/
theorem AnalyticOn.log {f : G ‚Üí ‚ÑÇ} {s : Set G} (fs : AnalyticOn ‚ÑÇ f s)
    (m : ‚àÄ z ‚àà s, f z ‚àà Complex.slitPlane) : AnalyticOn ‚ÑÇ (fun z ‚Ü¶ log (f z)) s :=
  fun z n ‚Ü¶ (analyticAt_log (m z n)).comp (fs z n)

/-- `f z ^ g z` is analytic if `f z` is not a nonpositive real -/
theorem AnalyticAt.cpow {f g : G ‚Üí ‚ÑÇ} {c : G} (fa : AnalyticAt ‚ÑÇ f c) (ga : AnalyticAt ‚ÑÇ g c)
    (m : f c ‚àà Complex.slitPlane) : AnalyticAt ‚ÑÇ (fun z ‚Ü¶ f z ^ g z) c := by
  have fc : f c ‚â† 0 := Complex.slitPlane_ne_zero m
  have e : (fun z ‚Ü¶ f z ^ g z) =·∂†[ùìù c] fun z ‚Ü¶ Complex.exp (Complex.log (f z) * g z) := by
    refine (fa.continuousAt.eventually_ne fc).mp (.of_forall ?_)
    intro z fz; simp only [fz, Complex.cpow_def, if_false]
  rw [analyticAt_congr e]
  exact AnalyticAt.exp.comp ((fa.log m).mul ga)
