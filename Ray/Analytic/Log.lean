import Mathlib.Analysis.SpecialFunctions.Complex.Analytic
import Ray.Analytic.Analytic
import Ray.Misc.Continuation

/-!
## Logs of nonzero analytic functions

If `f : ‚ÑÇ ‚Üí ‚ÑÇ` is analytic and nonzero in `ball 0 r`, we can take its logarithm.
-/

open Classical
open Complex (exp log)
open Metric (ball closedBall isOpen_ball)
open Set
open scoped Real Topology
noncomputable section

variable {f : ‚ÑÇ ‚Üí ‚ÑÇ} {c z : ‚ÑÇ} {r : ‚Ñù}

/-- `exp` is locally injective -/
lemma exp_eq_exp_of_lt {z w : ‚ÑÇ} (e : exp z = exp w) (lt : ‚Äñz - w‚Äñ < 2 * œÄ) : z = w := by
  simp only [Complex.exp_eq_exp_iff_exists_int] at e
  obtain ‚ü®n, e‚ü© := e
  simp only [e, add_eq_left, mul_eq_zero, Int.cast_eq_zero, OfNat.ofNat_ne_zero,
    Complex.ofReal_eq_zero, Real.pi_ne_zero, or_self, Complex.I_ne_zero, or_false]
  rw [add_comm w, ‚Üê sub_eq_iff_eq_add] at e
  simp only [e, Complex.norm_mul, Complex.norm_intCast, Complex.norm_ofNat, Complex.norm_real,
    Real.norm_eq_abs, abs_of_pos Real.pi_pos, Complex.norm_I, mul_one,
    ‚Üê lt_div_iff‚ÇÄ Real.two_pi_pos, div_self Real.two_pi_pos.ne'] at lt
  simpa only [‚Üê Int.cast_abs, ‚Üê Int.cast_one (R := ‚Ñù), Int.cast_lt, Int.abs_lt_one_iff] using lt

/-- Logarithms of nonzero analytic functions exist -/
theorem AnalyticOnNhd.exists_log (fa : AnalyticOnNhd ‚ÑÇ f (ball c r))
    (f0 : ‚àÄ z ‚àà ball c r, f z ‚â† 0) :
    ‚àÉ g : ‚ÑÇ ‚Üí ‚ÑÇ, AnalyticOnNhd ‚ÑÇ g (ball c r) ‚àß ‚àÄ z ‚àà ball c r, f z = exp (g z) := by
  by_cases r0 : r ‚â§ 0
  ¬∑ simp [Metric.ball_eq_empty.mpr r0]
  simp only [not_le] at r0
  set p : (‚ÑÇ ‚Üí ‚ÑÇ) ‚Üí ‚ÑÇ ‚Üí Prop := fun g z ‚Ü¶ AnalyticAt ‚ÑÇ g z ‚àß f z = exp (g z)
  have slit : ‚àÄ w ‚àà ball c r, ‚àÄ·∂† z in ùìù w, f z / f w ‚àà Complex.slitPlane := by
    intro w wm
    refine ((fa _ wm).continuousAt.div_const _).eventually_mem ?_
    simp only [div_self (f0 _ wm)]
    exact Complex.isOpen_slitPlane.mem_nhds (by simp)
  have loc : ‚àÄ w ‚àà ball c r, ‚àÉ g, ‚àÄ·∂† z in ùìù w, p g z := by
    intro w wm
    set g : ‚ÑÇ ‚Üí ‚ÑÇ := fun z ‚Ü¶ Complex.log (f z / f w) + Complex.log (f w)
    refine ‚ü®g, ?_‚ü©
    filter_upwards [isOpen_ball.eventually_mem wm, slit w wm] with z zm s
    refine ‚ü®?_, ?_‚ü©
    ¬∑ exact ((fa _ zm).div_const.clog s).add analyticAt_const
    ¬∑ have zw : f z / f w ‚â† 0 := by simp [f0 _ zm, f0 _ wm]
      simp only [g, Complex.exp_add, Complex.exp_log zw, Complex.exp_log (f0 _ wm),
        div_mul_cancel‚ÇÄ _ (f0 _ wm)]
  have near : ‚àÄ {w g h} (pg : p g w) (ph : p h w) (e : g w = h w),
      ‚àÄ·∂† z in ùìù w, ‚Äñg z - h z‚Äñ < 2 * œÄ := by
    intro w g h pg ph e
    refine ContinuousAt.eventually_lt (f := fun z ‚Ü¶ ‚Äñg z - h z‚Äñ) ?_ continuousAt_const ?_
    ¬∑ exact (pg.1.continuousAt.sub ph.1.continuousAt).norm
    ¬∑ simp [e, Real.pi_pos]
  have unique : ‚àÄ {g h : ‚ÑÇ ‚Üí ‚ÑÇ} {t : Set ‚ÑÇ}, IsOpen t ‚Üí IsPreconnected t ‚Üí (‚àÄ x ‚àà t, p g x) ‚Üí
      (‚àÄ x ‚àà t, p h x) ‚Üí (‚àÉ x ‚àà t, g x = h x) ‚Üí EqOn g h t := by
    intro g h t ot ct pg ph ‚ü®w,wt,e‚ü©
    refine AnalyticOnNhd.eqOn_of_preconnected_of_eventuallyEq (ùïú := ‚ÑÇ) ?_ ?_ ct wt ?_
    ¬∑ exact fun z m ‚Ü¶ (pg _ m).1
    ¬∑ exact fun z m ‚Ü¶ (ph _ m).1
    ¬∑ filter_upwards [ot.eventually_mem wt, near (pg _ wt) (ph _ wt) e] with z zm near
      exact exp_eq_exp_of_lt ((pg _ zm).2.symm.trans (ph _ zm).2) near
  obtain ‚ü®fs, fsp‚ü© := loc c (by simp [r0])
  have i : Continuation p c r fs := {
    pos := r0
    congr := by
      intro g h x pg e
      exact ‚ü®pg.1.congr e, pg.2.trans (by rw [e.self_of_nhds])‚ü©
    start := fsp
    point := by
      intro g t w t0 tr pg wt
      obtain ‚ü®h,ph‚ü© := loc w (Metric.closedBall_subset_ball tr wt)
      obtain ‚ü®e,e0,ph‚ü© := Metric.eventually_nhds_iff_ball.mp ph
      have all : ‚àÄ·∂† z in ùìù w, z ‚àà ball w e := isOpen_ball.eventually_mem (by simp [e0])
      have freq : ‚àÉ·∂† z in ùìù w, z ‚àà ball c t := by
        simp only [‚Üê mem_closure_iff_frequently, closure_ball _ t0.ne', wt]
      have ne : (ball w e ‚à© ball c t).Nonempty := (all.and_frequently freq).exists
      obtain ‚ü®d,dm‚ü© := ne
      set h' : ‚ÑÇ ‚Üí ‚ÑÇ := fun z ‚Ü¶ h z + (g d - h d)
      have ph' : ‚àÄ y ‚àà ball w e, p h' y := by
        intro y yw
        refine ‚ü®(ph y yw).1.add analyticAt_const, ?_‚ü©
        simp only [h', Complex.exp_add, Complex.exp_sub, ‚Üê (ph _ yw).2, ‚Üê (ph _ dm.1).2, mul_one,
          ‚Üê (pg.self_of_nhdsSet _ dm.2).2, div_self (f0 _ (Metric.ball_subset_ball tr.le dm.2))]
      have gh' : EqOn g h' (ball w e ‚à© ball c t) := by
        apply unique (isOpen_ball.inter isOpen_ball)
          ((convex_ball _ _).inter (convex_ball _ _)).isPreconnected
        ¬∑ exact fun x ‚ü®_,m‚ü© ‚Ü¶ pg.self_of_nhdsSet _ m
        ¬∑ exact fun x ‚ü®m,_‚ü© ‚Ü¶ ph' _ m
        ¬∑ exact ‚ü®d, dm, by simp only [add_sub_cancel, h']‚ü©
      refine ‚ü®h', ?_, ?_‚ü©
      ¬∑ filter_upwards [all] with z m
        exact ph' _ m
      ¬∑ exact (all.and_frequently freq).mp (.of_forall fun y m ‚Ü¶ ‚ü®m.2, (gh' m).symm‚ü©)
    unique := unique }
  obtain ‚ü®g,_,pg‚ü© := i.grow
  simp only [isOpen_ball.nhdsSet_eq, Filter.eventually_principal] at pg
  exact ‚ü®g, fun _ m ‚Ü¶ (pg _ m).1, fun _ m ‚Ü¶ (pg _ m).2‚ü©

/-- `n`th roots of nonzero analytic functions exist -/
theorem AnalyticOnNhd.exists_root (fa : AnalyticOnNhd ‚ÑÇ f (ball c r))
    (f0 : ‚àÄ z ‚àà ball c r, f z ‚â† 0) {n : ‚Ñï} (n0 : n ‚â† 0) :
    ‚àÉ g : ‚ÑÇ ‚Üí ‚ÑÇ, AnalyticOnNhd ‚ÑÇ g (ball c r) ‚àß ‚àÄ z ‚àà ball c r, f z = g z ^ n := by
  obtain ‚ü®g, ga, fg‚ü© := fa.exists_log f0
  refine ‚ü®fun z ‚Ü¶ exp (g z / n), ?_, ?_‚ü©
  ¬∑ intro z m
    exact (ga _ m).div_const.cexp
  ¬∑ intro z m
    rw [fg z m, ‚Üê Complex.exp_nat_mul, mul_div_cancel‚ÇÄ _ (by simpa)]
