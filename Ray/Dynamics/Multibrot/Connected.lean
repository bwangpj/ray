import Ray.Misc.Connected
import Ray.Dynamics.Multibrot.Isomorphism

/-!
## The Multibrot set and its complement are connected

`bottcherHomeomorph` from `Multibrot.lean` is an analytic homeomorphism from the exterior of the
Multibrot set (with `‚àû` included) to `ball 0 1`.  From this, the exterior is immediately (path)
connected: it's a ball.  But also the Multibrot set itself is connected, since it is the downward
intersection of compact, connected sets (the levelsets of `potential d`).
-/

open Complex (abs)
open Filter (Tendsto atTop)
open Function (uncurry)
open Metric (ball sphere closedBall isOpen_ball mem_ball_self mem_ball mem_closedBall
  mem_closedBall_self mem_sphere)
open Real (exp log)
open RiemannSphere
open Set
open scoped OnePoint RiemannSphere Topology Real
noncomputable section

variable {c : ‚ÑÇ}

-- Fix d ‚â• 2
variable {d : ‚Ñï} [Fact (2 ‚â§ d)]

/-- `multibrotExt` is path connected -/
theorem isPathConnected_multibrotExt (d : ‚Ñï) [Fact (2 ‚â§ d)] : IsPathConnected (multibrotExt d) := by
  rw [‚Üê ray_surj d]; apply IsPathConnected.image_of_continuousOn
  exact (convex_ball _ _).isPathConnected (Metric.nonempty_ball.mpr one_pos)
  exact (rayMAnalytic d).continuousOn

/-- Levelsets of `potential d` are connected -/
theorem isPathConnected_potential_levelset (p : ‚Ñù) (p0 : 0 ‚â§ p) (p1 : p < 1) :
    IsPathConnected (potential d ‚Åª¬π' {p}) := by
  have e : potential d ‚Åª¬π' {p} = ray d '' sphere 0 p := by
    apply Set.ext; intro c
    simp only [mem_preimage, mem_singleton_iff, ‚Üê norm_bottcher, mem_image, mem_sphere,
      Complex.dist_eq, sub_zero]
    constructor
    ¬∑ intro h; use bottcher d c; use h; rw [ray_bottcher]
      rw [‚Üê potential_lt_one, ‚Üê norm_bottcher, h]; exact p1
    ¬∑ intro ‚ü®e, ep, ec‚ü©; rw [‚Üê ec, bottcher_ray]; exact ep
      simp only [mem_ball, Complex.dist_eq, sub_zero, ep, p1]
  rw [e]; apply (isPathConnected_sphere p0).image_of_continuousOn
  exact (rayMAnalytic d).continuousOn.mono (Metric.sphere_subset_ball p1)

/-- `(multibrotEext d)·∂ú` is connected, since it is the downward intersection of the compact,
    connected sets `potential d ‚Åª¬π' (Ici p)`. -/
theorem isConnected_compl_multibrotExt (d : ‚Ñï) [Fact (2 ‚â§ d)] : IsConnected (multibrotExt d)·∂ú := by
  refine ‚ü®‚ü®((0 : ‚ÑÇ) : ùïä),?_‚ü©,?_‚ü©
  ¬∑ simp only [mem_compl_iff, multibrotExt_coe, not_not, multibrot_zero]
  have e : (multibrotExt d)·∂ú = ‚ãÇ p : Ico 0 (1 : ‚Ñù), potential d ‚Åª¬π' Ici p := by
    apply Set.ext; intro z
    simp only [mem_compl_iff, ‚Üê potential_lt_one, mem_iInter, mem_preimage, not_lt, mem_Ici]
    constructor; intro p1 ‚ü®q, m‚ü©; simp only [mem_Ico] at m ‚ä¢; linarith
    intro h; contrapose h; simp only [not_le, not_forall] at h ‚ä¢
    rcases exists_between h with ‚ü®y, py, y1‚ü©
    exact ‚ü®‚ü®y, ‚ü®le_trans potential_nonneg py.le, y1‚ü©‚ü©, py‚ü©
  rw [e]; refine @IsPreconnected.directed_iInter _ _ _ _ ?_ _ ?_ ?_ ?_
  ¬∑ exact Zero.instNonempty
  ¬∑ intro ‚ü®a, a0, a1‚ü© ‚ü®b, b0, b1‚ü©
    refine ‚ü®‚ü®max a b, mem_Ico.mpr ‚ü®le_max_of_le_left a0, max_lt a1 b1‚ü©‚ü©, ?_, ?_‚ü©
    ¬∑ intro z h; simp only [mem_preimage, mem_Ici, max_le_iff] at h ‚ä¢; exact h.1
    ¬∑ intro z h; simp only [mem_preimage, mem_Ici, max_le_iff] at h ‚ä¢; exact h.2
  ¬∑ intro ‚ü®p, m‚ü©; simp only
    refine IsConnected.isPreconnected (IsPathConnected.isConnected ?_)
    apply IsPathConnected.of_frontier
    ¬∑ rw [frontier_Ici]; exact isPathConnected_potential_levelset _ m.1 m.2
    ¬∑ exact potential_continuous
    ¬∑ exact isClosed_Ici
  ¬∑ intro ‚ü®p, m‚ü©; exact (isClosed_Ici.preimage potential_continuous).isCompact

/-- `multibrot d` is connected -/
theorem isConnected_multibrot (d : ‚Ñï) [Fact (2 ‚â§ d)] : IsConnected (multibrot d) := by
  have e : _root_.multibrot d = (fun z : ùïä ‚Ü¶ z.toComplex) '' (multibrotExt d)·∂ú := by
    apply Set.ext; intro z; simp only [mem_image, mem_compl_iff]; constructor
    intro m; use z
    simp only [multibrotExt_coe, not_not, m, toComplex_coe, true_and]
    intro ‚ü®w, m, wz‚ü©; induction w using OnePoint.rec
    ¬∑ contrapose m; clear m; simp only [not_not, multibrotExt_inf]
    ¬∑ simp only [multibrotExt_coe, not_not, toComplex_coe] at m wz; rwa [‚Üê wz]
  rw [e]; apply (isConnected_compl_multibrotExt d).image
  refine continuousOn_toComplex.mono ?_; intro z m
  contrapose m; simp only [mem_compl_iff, mem_singleton_iff, not_not] at m
  simp only [m, notMem_compl_iff, multibrotExt_inf]

/-- `multibrot d)·∂ú` is connected -/
theorem isConnected_compl_multibrot (d : ‚Ñï) [Fact (2 ‚â§ d)] : IsConnected (_root_.multibrot d)·∂ú := by
  have dc : IsConnected (multibrotExt d \ {‚àû}) := by
    refine ‚ü®‚ü®(((3 : ‚Ñù) : ‚ÑÇ) : ùïä),?_‚ü©,?_‚ü©
    constructor
    ¬∑ simp only [multibrotExt_coe]; apply multibrot_two_lt
      rw [Complex.norm_real, Real.norm_eq_abs, abs_of_pos]; norm_num; norm_num
    ¬∑ simp only [mem_singleton_iff, coe_ne_inf, not_false_iff]
    ¬∑ exact (isPathConnected_multibrotExt d).isConnected.isPreconnected.open_diff_singleton
        isOpen_multibrotExt _
  have e : (_root_.multibrot d)·∂ú = (fun z : ùïä ‚Ü¶ z.toComplex) '' (multibrotExt d \ {‚àû}) := by
    apply Set.ext; intro z; simp only [mem_compl_iff, mem_image]; constructor
    ¬∑ intro m; use z
      simp only [multibrotExt_coe, m, toComplex_coe, not_false_iff, mem_diff, and_true,
        mem_singleton_iff, coe_ne_inf]
    ¬∑ intro ‚ü®w, ‚ü®m, wi‚ü©, wz‚ü©; induction w using OnePoint.rec
      ¬∑ contrapose wi; clear wi; simp only [mem_singleton_iff, not_not]
      ¬∑ simp only [multibrotExt_coe, toComplex_coe] at m wz; rwa [‚Üê wz]
  rw [e]; apply dc.image
  refine continuousOn_toComplex.mono ?_; intro z ‚ü®_, i‚ü©
  simp only [mem_singleton_iff, mem_compl_iff] at i ‚ä¢; exact i
