import Mathlib.Analysis.Normed.Ring.Basic
import Mathlib.Analysis.SpecialFunctions.Complex.LogDeriv
import Mathlib.Analysis.SpecialFunctions.Log.Deriv
import Mathlib.Analysis.SpecialFunctions.Pow.Deriv
import Mathlib.Data.Complex.ExponentialBounds
import Mathlib.Data.Real.Basic
import Mathlib.Data.Real.Pi.Bounds
import Mathlib.Data.Set.Basic
import Mathlib.Tactic.Bound
import Mathlib.Tactic.FieldSimp
import Mathlib.Topology.MetricSpace.Basic
import Ray.Misc.Finset

/-!
## Assorted bound lemmas
-/

open Classical
open Complex (abs exp log I slitPlane)
open Filter (atTop)
open scoped Real NNReal Topology symmDiff

/-- A `Finset ‚Ñï` with only large elements -/
def Late (N : Finset ‚Ñï) (m : ‚Ñï) :=
  ‚àÄ n, n ‚àà N ‚Üí n ‚â• m

lemma late_iff_disjoint_range {m : ‚Ñï} {A : Finset ‚Ñï} : Late A m ‚Üî Disjoint A (Finset.range m) := by
  simp only [Late, ge_iff_le, Finset.disjoint_iff_ne, Finset.mem_range, ne_eq]; constructor
  ¬∑ intro h n na b bm; linarith [h _ na]
  ¬∑ intro h n na; specialize h n na n; simpa [not_true, imp_false, not_lt] using h

lemma sdiff_late {m : ‚Ñï} {B : Finset ‚Ñï} (A : Finset ‚Ñï) : B ‚â• Finset.range m ‚Üí Late (A \ B) m := by
  intro Bm n nAB
  rw [Finset.mem_sdiff] at nAB
  by_contra h; simp only [not_le] at h
  have nr := Finset.mem_range.mpr h
  have nB := Finset.mem_of_subset Bm nr
  exact nAB.2 nB

/-- Summing a subset of a geometric series is ‚â§ the series sum -/
theorem partial_geometric_bound {a : ‚Ñù} (N : Finset ‚Ñï) (a0 : 0 ‚â§ a) (a1 : a < 1) :
    N.sum (fun n ‚Ü¶ a^n) ‚â§ (1 - a)‚Åª¬π :=
  haveI pos : ‚àÄ n, n ‚àâ N ‚Üí 0 ‚â§ a^n := by intro n _; bound
  sum_le_hasSum N pos (hasSum_geometric_of_lt_one a0 a1)

theorem partial_scaled_geometric_bound {a : ‚Ñù} (c : ‚Ñù‚â•0) (N : Finset ‚Ñï) (a0 : 0 ‚â§ a) (a1 : a < 1)
    : N.sum (fun n ‚Ü¶ (c:‚Ñù) * a^n) ‚â§ c * (1 - a)‚Åª¬π := by
  rw [‚ÜêFinset.mul_sum]
  bound [partial_geometric_bound N a0 a1]

/-- Summing a late part of a series is equivalent to summing a shifted series -/
theorem late_series_sum {m : ‚Ñï} {N : Finset ‚Ñï} (h : Late N m) (f : ‚Ñï ‚Üí ‚Ñù) :
    N.sum f = (N.image (fun n ‚Ü¶ n - m)).sum (fun n ‚Ü¶ f (n + m)) := by
  set Ns := Finset.image (fun n ‚Ü¶ n - m) N
  have NNs : N = Finset.image (fun n ‚Ü¶ n + m) Ns := by
    apply Finset.ext; intro k
    rw [Finset.image_image, Finset.mem_image]
    simp
    apply Iff.intro
    ¬∑ intro kN; exists k; apply And.intro
      assumption; exact Nat.sub_add_cancel (h k kN)
    ¬∑ intro ha; rcases ha with ‚ü®a, aN, ak‚ü©
      rw [Nat.sub_add_cancel (h a aN)] at ak
      rw [‚Üê ak]; assumption
  rw [NNs]; apply Finset.sum_image
  intro a _ b _; exact Nat.add_right_cancel

/-- late_series_sum, but forgetting the image set -/
theorem late_series_sum' {m : ‚Ñï} {N : Finset ‚Ñï} (h : Late N m) (f : ‚Ñï ‚Üí ‚Ñù) :
    ‚àÉ M : Finset ‚Ñï, N.sum f = M.sum (fun n ‚Ü¶ f (n + m)) := by
  exists Finset.image (fun n ‚Ü¶ n - m) N
  exact late_series_sum h f

theorem late_geometric_bound {m : ‚Ñï} {a : ‚Ñù} {N : Finset ‚Ñï} (h : Late N m) (a0 : 0 ‚â§ a) (a1 : a < 1)
    : N.sum (fun n ‚Ü¶ a^n) ‚â§ a^m * (1 - a)‚Åª¬π := by
  rcases late_series_sum' h (fun n ‚Ü¶ a^n) with ‚ü®M,L‚ü©
  rw [L]; clear L
  have pa : (fun n ‚Ü¶ a^(n + m)) = (fun n ‚Ü¶ a^n * a^m) := by apply funext; intro n; rw [pow_add]
  calc
    M.sum (fun n ‚Ü¶ a^(n + m)) = M.sum (fun n ‚Ü¶ a^n * a^m) := by rw [ pa ]
    _ = M.sum (fun n ‚Ü¶ a^n) * a^m := (Finset.sum_mul _ _ _).symm
    _ ‚â§ (1 - a)‚Åª¬π * a^m := by bound [partial_geometric_bound M a0 a1]
    _ = a^m * (1 - a)‚Åª¬π := by ring

theorem finset_partition (A B : Finset ‚Ñï) : A = A \ B ‚à™ A ‚à© B := by
  apply Finset.ext
  simp only [Finset.mem_union, Finset.mem_sdiff, Finset.mem_inter]
  intro x; constructor
  ¬∑ intro a
    by_cases b : x ‚àà B
    ¬∑ right; use a,b
    ¬∑ left; use a,b
  ¬∑ intro h
    cases' h with m m
    repeat exact m.1

theorem finset_sum_partition (A B : Finset ‚Ñï) (f : ‚Ñï ‚Üí ‚ÑÇ) :
    A.sum f = (A \ B).sum f + (A ‚à© B).sum f := by
  have ha : A = A \ B ‚à™ A ‚à© B := finset_partition A B
  nth_rw 1 [ha]
  exact Finset.sum_union (Finset.disjoint_sdiff_inter A B)

theorem sdiff_sdiff_disjoint (A B : Finset ‚Ñï) : Disjoint (A \ B) (B \ A) :=
  Finset.disjoint_of_subset_right Finset.sdiff_subset Finset.sdiff_disjoint

theorem symmDiff_union (A B : Finset ‚Ñï) : A ‚àÜ B = A \ B ‚à™ B \ A := by
  rw [symmDiff_def, Finset.sup_eq_union]

theorem symmDiff_bound (A B : Finset ‚Ñï) (f : ‚Ñï ‚Üí ‚ÑÇ) :
    dist (A.sum f) (B.sum f) ‚â§ (A ‚àÜ B).sum (fun n ‚Ü¶ ‚Äñf n‚Äñ) := by
  rw [finset_sum_partition A B f, finset_sum_partition B A f, Finset.inter_comm B A]
  rw [dist_add_right ((A \ B).sum f) ((B \ A).sum f) ((A ‚à© B).sum f)]
  rw [Complex.dist_eq]
  trans (A \ B).sum (fun n ‚Ü¶ ‚Äñf n‚Äñ) + (B \ A).sum (fun n ‚Ü¶ ‚Äñf n‚Äñ)
  ¬∑ have ha := finset_complex_abs_sum_le (A \ B) f
    have hb := finset_complex_abs_sum_le (B \ A) f
    calc ‚Äñ(A \ B).sum f - (B \ A).sum f‚Äñ
      _ ‚â§ ‚Äñ(A \ B).sum f‚Äñ + ‚Äñ(B \ A).sum f‚Äñ := by bound
      _ ‚â§ (A \ B).sum (fun n ‚Ü¶ ‚Äñf n‚Äñ) + (B \ A).sum (fun n ‚Ü¶ ‚Äñf n‚Äñ) := by bound
  ¬∑ apply le_of_eq
    rw [‚ÜêFinset.sum_union (sdiff_sdiff_disjoint A B), symmDiff_union]

/-- Symmetric differences of sets containing ranges are late -/
theorem symmDiff_late {A B : Finset ‚Ñï} {m : ‚Ñï} (ha : A ‚â• Finset.range m) (hb : B ‚â• Finset.range m) :
    Late (A ‚àÜ B) m := by
  intro n ab
  rw [symmDiff_def, Finset.sup_eq_union, Finset.mem_union] at ab
  by_contra h; simp at h
  cases' ab with a b
  ¬∑ rw [Finset.mem_sdiff] at a
    have h := Finset.mem_of_subset hb (Finset.mem_range.mpr h)
    exact a.2 h
  ¬∑ rw [Finset.mem_sdiff] at b
    have h := Finset.mem_of_subset ha (Finset.mem_range.mpr h)
    exact b.2 h

/-- `a - z` has similar absolute value to `a` for small `z` -/
theorem sub_near (a z : ‚ÑÇ) : |‚Äña - z‚Äñ - ‚Äña‚Äñ| ‚â§ ‚Äñz‚Äñ := by
  rw [abs_le]; constructor
  ¬∑ simp only [neg_le_sub_iff_le_add]
    exact norm_le_norm_sub_add a z
  ¬∑ calc
      ‚Äña - z‚Äñ - ‚Äña‚Äñ ‚â§ ‚Äña‚Äñ + ‚Äñz‚Äñ - ‚Äña‚Äñ := by bound
      _ = ‚Äñz‚Äñ := by simp only [add_sub_cancel_left]

theorem add_near (a z : ‚ÑÇ) : |‚Äña + z‚Äñ - ‚Äña‚Äñ| ‚â§ ‚Äñz‚Äñ := by
  have h := sub_near a (-z)
  simp only [sub_neg_eq_add, norm_neg] at h
  assumption

theorem mem_slitPlane_of_near_one {z : ‚ÑÇ} : ‚Äñz - 1‚Äñ < 1 ‚Üí z ‚àà slitPlane := by
  intro h; apply Or.inl
  have hr : (1 - z).re < 1 := by
    calc
      (1 - z).re ‚â§ |(1 - z).re| := le_abs_self (1 - z).re
      _ ‚â§ ‚Äñ1 - z‚Äñ := Complex.abs_re_le_norm _
      _ = ‚Äñz - 1‚Äñ := by rw [‚Üênorm_neg (1 - z)]; simp only [neg_sub]
      _ < 1 := h
  simp only [Complex.sub_re, Complex.one_re, sub_lt_self_iff] at hr
  assumption

theorem near_one_avoids_zero {z : ‚ÑÇ} : ‚Äñz - 1‚Äñ < 1 ‚Üí z ‚â† 0 := by
  intro h; exact Complex.slitPlane_ne_zero (mem_slitPlane_of_near_one h)

theorem derivWithin.cid {z : ‚ÑÇ} {s : Set ‚ÑÇ} (o : IsOpen s) (zs : z ‚àà s) :
    derivWithin (fun z ‚Ü¶ z) s z = 1 :=
  derivWithin_id z s (IsOpen.uniqueDiffWithinAt o zs)

theorem derivWithin.clog {f : ‚ÑÇ ‚Üí ‚ÑÇ} {z : ‚ÑÇ} {s : Set ‚ÑÇ} (o : IsOpen s) (zs : z ‚àà s)
    (hf : DifferentiableWithinAt ‚ÑÇ f s z) (hx : (f z).re > 0 ‚à® (f z).im ‚â† 0) :
    derivWithin (fun z ‚Ü¶ Complex.log (f z)) s z = derivWithin f s z / f z := by
  have hz := DifferentiableWithinAt.hasDerivWithinAt hf
  have h := HasDerivWithinAt.clog hz hx
  have u := o.uniqueDiffWithinAt (ùïú := ‚ÑÇ) zs
  rw [HasDerivWithinAt.derivWithin h u]

theorem weak_log1p_small {z : ‚ÑÇ} {r : ‚Ñù} (r1 : r < 1) (h : ‚Äñz‚Äñ < r) :
    ‚Äñlog (1 + z)‚Äñ ‚â§ 1/(1 - r) * ‚Äñz‚Äñ := by
  by_cases rp : r ‚â§ 0
  ¬∑ have a0 : ‚Äñz‚Äñ < 0 := lt_of_lt_of_le h rp
    have a0' : ‚Äñz‚Äñ ‚â• 0 := by bound
    exfalso
    linarith [a0, a0']
  ¬∑ simp only [not_le] at rp
    have L : ‚Äñlog (1 + z) - log 1‚Äñ ‚â§ 1/(1 - r) * ‚Äñ1 + z - 1‚Äñ := by
      generalize hs : Metric.ball (1:‚ÑÇ) r = s
      have o : IsOpen s := by rw [‚Üê hs]; exact Metric.isOpen_ball
      have s1z : 1 + z ‚àà s := by simp [‚Üê hs]; assumption
      have s1 : (1:‚ÑÇ) ‚àà s := by simp [‚Üê hs]; assumption
      have sp : ‚àÄ w : ‚ÑÇ, w ‚àà s ‚Üí w.re > 0 ‚à® w.im ‚â† 0 := by
        intro w ws
        apply mem_slitPlane_of_near_one
        simp only [Metric.mem_ball, Complex.dist_eq, ‚Üê hs] at ws
        calc ‚Äñw - 1‚Äñ < r := by assumption
          _ < 1 := r1
      have sa : ‚àÄ w : ‚ÑÇ, w ‚àà s ‚Üí ‚Äñw‚Äñ ‚â• 1 - r := by
        intro w ws
        simp only [Metric.mem_ball, Complex.dist_eq, ‚Üê hs] at ws
        calc ‚Äñw‚Äñ = ‚Äñ1 + (w - 1)‚Äñ := by ring_nf
          _ ‚â• ‚Äñ(1 : ‚ÑÇ)‚Äñ - ‚Äñw - 1‚Äñ := by bound
          _ ‚â• ‚Äñ(1 : ‚ÑÇ)‚Äñ - r := by bound
          _ = 1 - r := by rw [norm_one]
      refine Convex.norm_image_sub_le_of_norm_derivWithin_le ?_ ?_ ?_ s1 s1z
      ¬∑ exact DifferentiableOn.clog differentiableOn_id sp
      ¬∑ intro w ws
        rw [derivWithin.clog o ws, derivWithin.cid o ws]
        simp only [one_div, norm_inv]
        rw [inv_le_comm‚ÇÄ]
        have aw := sa w ws; simp at aw; field_simp; assumption
        have aw := sa w ws; linarith; norm_num; assumption
        exact differentiableWithinAt_id
        exact sp w ws
      ¬∑ rw [‚Üê hs]; exact convex_ball _ _
    simp only [Complex.log_one, sub_zero, one_div, add_sub_cancel_left] at L
    simpa only [one_div, ge_iff_le]

theorem le_of_forall_small_le_add {a b t : ‚Ñù} (tp : 0 < t) (h : ‚àÄ e, 0 < e ‚Üí e < t ‚Üí a ‚â§ b + e) :
    a ‚â§ b := by
  apply le_of_forall_pos_lt_add
  intro e ep
  by_cases et : e ‚â• t
  ¬∑ specialize h (t/2) (by bound) (by bound)
    calc a ‚â§ b + t/2 := h
      _ ‚â§ b + e/2 := by bound
      _ < b + e := by bound
  ¬∑ simp only [ge_iff_le, not_le] at et
    calc a ‚â§ b + e/2 := h (e/2) (by bound) (by linarith)
      _ < b + e := by bound

theorem one_over_one_sub_le {x : ‚Ñù} : 0 ‚â§ x ‚Üí x ‚â§ 1/2 ‚Üí 1/(1 - x) ‚â§ 1 + 2*x := by
  intro xp xh
  have x1 : 1 - x > 0 := by linarith
  rw [div_le_iff‚ÇÄ x1]
  calc (1 + 2*x) * (1 - x) = 1 + x * (1 - 2*x) := by ring
    _ ‚â• 1 + x * (1 - 2 * (1/2)) := by bound
    _ = 1 := by ring

theorem Metric.continuous_near {f : ‚ÑÇ ‚Üí ‚ÑÇ} {z : ‚ÑÇ} {r : ‚Ñù} (fc : ContinuousAt f z) (rp : 0 < r)
    : ‚àÄ e, 0 < e ‚Üí ‚àÉ s, 0 < s ‚àß s ‚â§ r ‚àß ‚àÄ {w} , ‚Äñw - z‚Äñ < s ‚Üí ‚Äñf w - f z‚Äñ < e := by
  intro e ep
  rcases Metric.continuousAt_iff.mp fc e ep with ‚ü®s,sp,sc‚ü©
  simp_rw [ Complex.dist_eq ] at sc
  by_cases sr : s ‚â§ r; exists s
  simp only [not_le] at sr
  exists r
  refine ‚ü®rp, by bound, ?_‚ü©
  intro w wr
  refine @sc w ?_
  trans r; assumption; assumption

theorem slightly_smaller {z : ‚ÑÇ} (nz : z ‚â† 0) {r : ‚Ñù} (rp : 0 < r) :
    ‚àÉ w, ‚Äñw - z‚Äñ < r ‚àß ‚Äñw‚Äñ < ‚Äñz‚Äñ := by
  by_cases rz : ‚Äñz‚Äñ < r
  ¬∑ use 0
    simp only [zero_sub, norm_neg, rz, norm_zero, norm_pos_iff, ne_eq, nz, not_false_eq_true,
      and_self]
  simp only [not_lt] at rz
  have azp : 0 < ‚Äñz‚Äñ := norm_pos_iff.mpr nz
  generalize ha : 1 - r/2/‚Äñz‚Äñ = a
  have a0 : 0 ‚â§ a := by rw [‚Üêha, sub_nonneg, div_le_one azp]; exact _root_.trans (by bound) rz
  have a1 : a < 1 := by rw [‚Üêha, sub_lt_self_iff]; positivity
  generalize hw : ‚Üëa * z = w
  use w; constructor
  ¬∑ rw [ ‚Üêhw, ‚Üê ha]
    simp only [Complex.ofReal_sub, Complex.ofReal_one, Complex.ofReal_div]
    rw [mul_sub_right_distrib]
    simp only [one_mul, Complex.ofReal_ofNat, sub_sub_cancel_left, norm_neg, Complex.norm_mul,
      Complex.norm_div, Complex.norm_real, Real.norm_eq_abs, abs_of_pos rp, Complex.norm_ofNat,
      div_mul (r / 2), div_one, half_lt_self_iff, div_self azp.ne', abs_norm, rp]
  ¬∑ simp only [‚Üê hw, Complex.norm_mul, Complex.norm_real, Real.norm_of_nonneg a0]
    exact mul_lt_of_lt_one_left azp a1

/-- There are smaller values nearby any z ‚â† 0 -/
theorem frequently_smaller {z : ‚ÑÇ} (z0 : z ‚â† 0) : ‚àÉ·∂† w : ‚ÑÇ in ùìù z, ‚Äñw‚Äñ < ‚Äñz‚Äñ := by
  simp only [Filter.Frequently, Metric.eventually_nhds_iff, not_exists, not_forall, not_not,
    Complex.dist_eq, not_and]
  intro r rp; rcases slightly_smaller z0 rp with ‚ü®w, b, lt‚ü©; use w, b, lt

theorem weak_to_strong_small {f : ‚ÑÇ ‚Üí ‚ÑÇ} {z : ‚ÑÇ} {r c : ‚Ñù} (rp : r > 0) (cp : c > 0)
    (zr : ‚Äñz‚Äñ ‚â§ r) (fc : ContinuousAt f z) (h : ‚àÄ z : ‚ÑÇ, ‚Äñz‚Äñ < r ‚Üí ‚Äñf z‚Äñ ‚â§ c * ‚Äñz‚Äñ) :
    ‚Äñf z‚Äñ ‚â§ c * ‚Äñz‚Äñ := by
  by_cases nz : z = 0; ¬∑ refine h z ?_; rw [nz]; simpa
  apply le_of_forall_small_le_add zero_lt_one
  intro e ep _
  rcases Metric.continuous_near fc rp e ep with ‚ü®s,sp,_,sc‚ü©
  rcases slightly_smaller nz sp with ‚ü®w,wz,awz‚ü©
  have wr : ‚Äñw‚Äñ < r := lt_of_lt_of_le awz zr
  calc ‚Äñf z‚Äñ = ‚Äñf w - (f w - f z)‚Äñ := by ring_nf
    _ ‚â§ ‚Äñf w‚Äñ + ‚Äñf w - f z‚Äñ := by bound
    _ ‚â§ c * ‚Äñw‚Äñ + e := by bound [h w wr, sc wz]
    _ ‚â§ c * ‚Äñz‚Äñ + e := by bound

theorem log1p_small' {z : ‚ÑÇ} {r : ‚Ñù} (r1 : r < 1) (zr : ‚Äñz‚Äñ ‚â§ r) :
    ‚Äñlog (1 + z)‚Äñ ‚â§ 1/(1 - r) * ‚Äñz‚Äñ := by
  by_cases r0 : r ‚â§ 0
  ¬∑ have z0 := le_antisymm (le_trans zr r0) (norm_nonneg z)
    simp only [norm_eq_zero] at z0
    simp only [z0, add_zero, Complex.log_one, norm_zero, one_div, mul_zero, le_refl]
  simp only [not_le] at r0
  have fc : ContinuousAt (fun z ‚Ü¶ log (1 + z)) z := by
    apply ContinuousAt.clog; apply ContinuousAt.add; exact continuousAt_const; exact continuousAt_id
    refine mem_slitPlane_of_near_one ?_
    simp only [add_sub_cancel_left, lt_of_le_of_lt zr r1]
  apply weak_to_strong_small r0 (by bound) zr fc
  intro w wr
  exact @weak_log1p_small w r (by bound) wr

theorem log1p_small {z : ‚ÑÇ} (zs : ‚Äñz‚Äñ ‚â§ 1/2) : ‚Äñlog (1 + z)‚Äñ ‚â§ 2 * ‚Äñz‚Äñ :=
  le_trans (log1p_small' (by norm_num) zs) (le_of_eq (by norm_num))

/-- `log (1+x)` is small for small `x` -/
theorem Real.log1p_small' {x r : ‚Ñù} (r1 : r < 1) (xr : |x| ‚â§ r) :
    |Real.log (1 + x)| ‚â§ 1 / (1-r) * |x| := by
  set z := (x : ‚ÑÇ)
  have zx : ‚Äñz‚Äñ = |x| := by simp only [Complex.norm_real, norm_eq_abs, z]
  simp only [‚Üê Complex.log_ofReal_re, ‚Üê zx] at xr ‚ä¢
  refine _root_.trans (_root_.trans (Complex.abs_re_le_norm _) ?_) (_root_.log1p_small' r1 xr)
  simp only [Complex.ofReal_add, Complex.ofReal_one, le_refl, z]

/-- `log (1+x)` is small for small `x` -/
theorem Real.log1p_small {x : ‚Ñù} (xr : |x| ‚â§ 1/2) : |Real.log (1 + x)| ‚â§ 2 * |x| :=
  le_trans (Real.log1p_small' (by norm_num) xr) (le_of_eq (by norm_num))

/-- `log z` is small for `z ‚âà 1` -/
theorem log_small {z : ‚ÑÇ} (zs : ‚Äñz - 1‚Äñ ‚â§ 1 / 2) : ‚Äñlog z‚Äñ ‚â§ 2 * ‚Äñz - 1‚Äñ := by
  generalize zw : z - 1 = z1; have wz : z = 1 + z1 := by rw [‚Üê zw]; ring
  rw [wz]; refine log1p_small ?_; rw [‚Üê zw]; assumption

theorem weak_exp_small {z : ‚ÑÇ} (h : ‚Äñz‚Äñ < 1) : ‚Äñexp z - 1‚Äñ ‚â§ 2 * ‚Äñz‚Äñ := by
  have hr : 0 ‚â§ (1 : ‚Ñù) := by norm_num
  have L := Complex.locally_lipschitz_exp hr (by bound) 0 z
    (by simpa only [sub_zero])
  simp only [Complex.exp_zero, norm_one, mul_one, sub_zero] at L
  have t : 1 + 1 = (2 : ‚Ñù) := by norm_num
  rw [t] at L; assumption

/-- `exp z ‚âà 1` for `z ‚âà 0` -/
theorem exp_small {z : ‚ÑÇ} (zs : ‚Äñz‚Äñ ‚â§ 1) : ‚Äñexp z - 1‚Äñ ‚â§ 2 * ‚Äñz‚Äñ := by
  have rp : (1 : ‚Ñù) > 0 := by norm_num
  have cp : (2 : ‚Ñù) > 0 := by norm_num
  have fc : ContinuousAt (fun z ‚Ü¶ exp z - 1) z := by
    apply ContinuousAt.sub; apply ContinuousAt.cexp
    exact continuousAt_id; exact continuousAt_const
  apply weak_to_strong_small rp cp zs fc
  intro w wr; exact weak_exp_small wr

theorem pow1p_small {z w : ‚ÑÇ} (zs : ‚Äñz‚Äñ ‚â§ 1/2) (ws : ‚Äñw‚Äñ ‚â§ 1) :
    ‚Äñ(1 + z) ^ w - 1‚Äñ ‚â§ 4 * ‚Äñz‚Äñ * ‚Äñw‚Äñ := by
  have z1 : 1 + z ‚â† 0 := by
    rw [‚Üê norm_pos_iff]
    calc ‚Äñ1 + z‚Äñ ‚â• ‚Äñ(1 : ‚ÑÇ)‚Äñ - ‚Äñz‚Äñ := by bound
      _ ‚â• ‚Äñ(1 : ‚ÑÇ)‚Äñ - 1/2 := by bound
      _ > 0 := by norm_num
  rw [Complex.cpow_def_of_ne_zero z1]
  have ls := log1p_small zs
  have eas : ‚Äñlog (1 + z) * w‚Äñ ‚â§ 1 := by
    rw [Complex.norm_mul]
    calc ‚Äñlog (1 + z)‚Äñ * ‚Äñw‚Äñ ‚â§ 2 * ‚Äñz‚Äñ * ‚Äñw‚Äñ := by bound
      _ ‚â§ 2 * (1/2) * 1 := by bound
      _ = 1 := by norm_num
  have es := exp_small eas
  rw [Complex.norm_mul, ‚Üêmul_assoc] at es
  trans 2 * ‚Äñlog (1 + z)‚Äñ * ‚Äñw‚Äñ
  exact es
  calc 2 * ‚Äñlog (1 + z)‚Äñ * ‚Äñw‚Äñ ‚â§ 2 * (2 * ‚Äñz‚Äñ) * ‚Äñw‚Äñ := by bound
    _ = 4 * ‚Äñz‚Äñ * ‚Äñw‚Äñ := by ring

/-- `abs (z^w - 1) ‚â§ 2 * abs ((z-1)w)` for `z ‚âà 1`, `w` small -/
theorem pow_small {z w : ‚ÑÇ} (zs : ‚Äñz - 1‚Äñ ‚â§ 1 / 2) (ws : ‚Äñw‚Äñ ‚â§ 1) :
    ‚Äñz ^ w - 1‚Äñ ‚â§ 4 * ‚Äñz - 1‚Äñ * ‚Äñw‚Äñ := by
  generalize zw : z - 1 = z1; have wz : z = 1 + z1 := by rw [‚Üê zw]; ring
  rw [wz]; refine pow1p_small ?_ ws; rw [‚Üê zw]; assumption

/-- `a + b ‚â† 0` from `abs b < abs a` -/
theorem add_ne_zero_of_abs_lt {a b : ‚ÑÇ} (h : ‚Äñb‚Äñ < ‚Äña‚Äñ) : a + b ‚â† 0 := by
  have e : a + b = a - -b := by abel
  rw [e, sub_ne_zero]; contrapose h; simp only [not_not] at h
  simp only [h, not_lt, norm_neg, le_refl]

/-- `e < 3` -/
theorem Real.exp_one_lt_3 : Real.exp 1 < 3 :=
  _root_.trans Real.exp_one_lt_d9 (by norm_num)

theorem log_add (a b : ‚Ñù) (a0 : 0 < a) (ab0 : 0 < a + b) :
    Real.log (a + b) = Real.log a + Real.log (1 + b/a) := by
  have d0 : 0 < 1 + b/a := by field_simp [a0.ne']; bound
  rw [‚ÜêReal.log_mul a0.ne' d0.ne', left_distrib, mul_one, mul_div_cancel‚ÇÄ _ a0.ne']

/-- `log (abs (a + b)) = log (abs a) + log (abs (1 + b/a))` -/
theorem log_abs_add (a b : ‚ÑÇ) (a0 : a ‚â† 0) (ab0 : a + b ‚â† 0) :
    Real.log (‚Äña + b‚Äñ) = Real.log (‚Äña‚Äñ) + Real.log (‚Äñ1 + b/a‚Äñ) := by
  have d0 : 1 + b/a ‚â† 0 := by field_simp [a0, ab0]
  have a0' : ‚Äña‚Äñ ‚â† 0 := norm_ne_zero_iff.mpr a0
  have d0' : ‚Äñ1 + b / a‚Äñ ‚â† 0 := norm_ne_zero_iff.mpr d0
  rw [‚ÜêReal.log_mul a0' d0', ‚Üê Complex.norm_mul, left_distrib, mul_one, mul_div_cancel‚ÇÄ _ a0]

/-- `e^(1/4) ‚â§ 4/3` -/
theorem Real.exp_forth_lt_four_thirds : Real.exp (1/4) < 4/3 := by
  rw [‚ÜêReal.exp_one_rpow, one_div, ‚Üê@Real.pow_rpow_inv_natCast (4/3) 4 (by norm_num) (by norm_num)]
  refine Real.rpow_lt_rpow (Real.exp_pos _).le ?_ (by norm_num)
  exact _root_.trans Real.exp_one_lt_d9 (by norm_num)

/-- Bound `abs (product - 1)` in terms of `abs (sum)` -/
theorem dist_prod_one_le_abs_sum {f : ‚Ñï ‚Üí ‚ÑÇ} {s : Finset ‚Ñï} {c : ‚Ñù}
    (le : s.sum (fun n ‚Ü¶ ‚Äñf n - 1‚Äñ) ‚â§ c) (c1 : c ‚â§ 1/2) : ‚Äñs.prod f - 1‚Äñ ‚â§ 4 * c := by
  set g := fun n ‚Ü¶ Complex.log (f n)
  have b : ‚àÄ n, n ‚àà s ‚Üí ‚Äñf n - 1‚Äñ ‚â§ c := by
    intro n m; refine _root_.trans ?_ le
    exact Finset.single_le_sum (f := fun n ‚Ü¶ ‚Äñf n - 1‚Äñ) (fun _ _ ‚Ü¶ norm_nonneg _) m
  have f0 : ‚àÄ n, n ‚àà s ‚Üí f n ‚â† 0 := by
    intro n m; specialize b n m; contrapose b; simp only [not_not] at b
    simp only [b, not_le]; norm_num; linarith
  have sg : ‚Äñs.sum g‚Äñ ‚â§ 2 * c := by
    refine le_trans (norm_sum_le _ _) ?_
    refine le_trans (Finset.sum_le_sum (fun n m ‚Ü¶ log_small (le_trans (b n m) c1))) ?_
    rw [‚Üê Finset.mul_sum]; bound
  have e : s.prod f = Complex.exp (s.sum g) := by
    rw [Complex.exp_sum]; apply Finset.prod_congr rfl
    intro n m; rw [Complex.exp_log (f0 n m)]
  rw [e]; exact _root_.trans (exp_small (by linarith)) (by linarith)

/-- If `z, w` are close, then `0 < (z‚Åª¬π * w).re` -/
lemma re_mul_inv_pos_of_close {z w : ‚ÑÇ} (wz : ‚Äñw - z‚Äñ < ‚Äñz‚Äñ) : 0 < (z‚Åª¬π * w).re := by
  have z0 : z ‚â† 0 := norm_ne_zero_iff.mp (lt_of_le_of_lt (by bound) wz).ne'
  have h : ‚Äñz‚Åª¬π * w - 1‚Äñ < 1 := by
    nth_rw 1 [‚Üê inv_mul_cancel‚ÇÄ z0]
    simp only [‚Üê mul_sub, norm_mul, norm_inv]
    simp only [‚Üê div_eq_inv_mul]
    bound [norm_pos_iff.mpr z0]
  generalize z‚Åª¬π * w = x at h
  rw [norm_sub_rev] at h
  simpa only [Complex.sub_re, Complex.one_re, sub_lt_self_iff] using
    lt_of_le_of_lt (Complex.re_le_norm _) h
